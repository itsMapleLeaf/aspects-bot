generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model DiscordUser {
  id String @id // Discord user ID

  characterId String?    @unique
  character   Character? @relation(fields: [characterId], references: [id], onDelete: SetNull)
}

model DiscordGuild {
  id          String       @id // Discord guild ID
  characters  Character[]
  combatState CombatState?
}

model Character {
  id                   String         @id
  name                 String
  raceId               String
  aspectId             String
  primaryAttributeId   String
  secondaryAttributeId String
  tertiaryAttributeId  String
  health               Int? // if not set, use calculated max health
  fatigue              Int            @default(0)
  currency             Int            @default(100)
  combatMemberships    CombatMember[]
  player               DiscordUser?

  guildId String
  guild   DiscordGuild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model CombatState {
  guildId               String         @id
  guild                 DiscordGuild   @relation(fields: [guildId], references: [id])
  round                 Int            @default(1)
  participantIndex      Int            @default(0)
  members               CombatMember[]
  initiativeAttributeId String
}

model CombatMember {
  characterId String
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  combatStateId String
  combatState   CombatState @relation(fields: [combatStateId], references: [guildId], onDelete: Cascade)

  initiative Int

  @@id([characterId, combatStateId])
}
